snippet test
defmodule ${1}Test do
	use ExUnit.Case

	test "${2}" do
	end
end
endsnippet
snippet mod
defmodule ${1} do
	${2}
end
endsnippet
snippet genserver
defmodule ${1} do
	use GenServer

	@initial_state ${2:[]}

	# Public API

	def get do
		GenServer.call(__MODULE__, :get)
	end

	def set(state) do
		GenServer.call(__MODULE__, {:set, state})
	end

	# GenServer callback

	def start_link do
		GenServer.start_link __MODULE__, :ok, name: __MODULE__
	end

	def init(:ok) do
		{:ok, @initial_state}
	end

	def handle_call(:get, _from, state) do
		{:reply, state}
	end

	def handle_cast({:set, new_state}, _state) do
		{:noreply, new_state}
	end

	def handle_info(_msg, state) do
		{:noreply, state}
	end
end
endsnippet
snippet phc "A Phoenix controller"
defmodule ${1:App}.${2}Controller do
	use $1.Web, :controller

	$0
end
endsnippet
snippet phct "A Phoenix controller test"
defmodule ${1:App}.${2}ControllerTest do
	use $1.ConnCase

	$0
end
endsnippet
snippet pp "Inspect"
IO.inspect $0
endsnippet
