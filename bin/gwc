#!/usr/bin/env bash
# gwc — “git worktree cleanup”
#  ▸ inside a work-tree:   gwc
#  ▸ at repo root:         gwc    → choose a work-tree with fzf

set -euo pipefail

###############################################################################
# 0 · ensure we’re in a repo and hop to its root
###############################################################################
root=$(git -C . rev-parse --show-toplevel 2>/dev/null) || {
  echo "gwc: not inside a Git repository" >&2
  exit 1
}
orig_pwd=$PWD
cd "$root"

# repo’s default branch (master vs main) so we don’t delete it
if git branch --format='%(refname:short)' | grep -q '^master$'; then
  main_branch=master
else
  main_branch=main
fi

###############################################################################
# 1 · decide which work-tree to remove
###############################################################################
pick_worktree() {
  command -v fzf >/dev/null 2>&1 || {
    echo "gwc: fzf not found – needed for interactive selection" >&2
    exit 1
  }
  mapfile -t paths < <(git worktree list --porcelain |
                       awk '/^worktree /{print $2}' |
                       grep -v "^$root\$")               # drop the main checkout
  (( ${#paths[@]} )) || { echo "gwc: no extra work-trees found" >&2; exit 0; }

  printf '%s\n' "${paths[@]}" \
    | while read -r p; do printf "%s\t%s\n" "$(basename "$p")" "$p"; done \
    | fzf --prompt='Delete work-tree ❯ ' --with-nth=1 --delimiter='\t' --exit-0 \
    | cut -f2
}

# ———————————————————————————————————————————————————————————
wtdir=""
if [[ $orig_pwd == "$root/worktrees/"* ]]; then
  # launched from somewhere inside worktrees/NAME/…
  name=${orig_pwd#"$root/worktrees/"}          # strip prefix
  name=${name%%/*}                             # first path component
  wtdir="$root/worktrees/$name"
else
  # launched at repo root (or elsewhere) → interactive picker
  wtdir=$(pick_worktree)
  [[ -n $wtdir ]] || exit 0                    # user hit <Esc>
fi

[[ -d $wtdir ]] || { echo "gwc: '$wtdir' is not a directory" >&2; exit 1; }

branch=$(git -C "$wtdir" symbolic-ref --quiet --short HEAD || true)

###############################################################################
# 2 · do the cleanup
###############################################################################
echo "Removing work-tree: $wtdir"
cd "$root"                                     # leave the soon-to-vanish dir

git worktree remove -f "$wtdir"

# safety: nuke any leftovers if git didn't remove them
[[ -d $wtdir ]] && rm -rf "$wtdir"

# delete the branch if it exists and isn’t main/master
if [[ -n $branch && $branch != "$main_branch" ]]; then
  git branch -D "$branch" 2>/dev/null || true
fi

echo "✓ Work-tree removed. Back at repo root: $root"
